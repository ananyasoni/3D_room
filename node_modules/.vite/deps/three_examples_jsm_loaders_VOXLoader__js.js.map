{
  "version": 3,
  "sources": ["../../three/examples/jsm/loaders/VOXLoader.js"],
  "sourcesContent": ["import {\n\tBufferGeometry,\n\tColor,\n\tData3DTexture,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tLoader,\n\tLinearFilter,\n\tMesh,\n\tMeshStandardMaterial,\n\tNearestFilter,\n\tRedFormat,\n\tSRGBColorSpace\n} from 'three';\n\nclass VOXLoader extends Loader {\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( buffer ) {\n\n\t\tconst data = new DataView( buffer );\n\n\t\tconst id = data.getUint32( 0, true );\n\t\tconst version = data.getUint32( 4, true );\n\n\t\tif ( id !== 542658390 || version !== 150 ) {\n\n\t\t\tconsole.error( 'Not a valid VOX file' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst DEFAULT_PALETTE = [\n\t\t\t0x00000000, 0xffffffff, 0xffccffff, 0xff99ffff, 0xff66ffff, 0xff33ffff, 0xff00ffff, 0xffffccff,\n\t\t\t0xffccccff, 0xff99ccff, 0xff66ccff, 0xff33ccff, 0xff00ccff, 0xffff99ff, 0xffcc99ff, 0xff9999ff,\n\t\t\t0xff6699ff, 0xff3399ff, 0xff0099ff, 0xffff66ff, 0xffcc66ff, 0xff9966ff, 0xff6666ff, 0xff3366ff,\n\t\t\t0xff0066ff, 0xffff33ff, 0xffcc33ff, 0xff9933ff, 0xff6633ff, 0xff3333ff, 0xff0033ff, 0xffff00ff,\n\t\t\t0xffcc00ff, 0xff9900ff, 0xff6600ff, 0xff3300ff, 0xff0000ff, 0xffffffcc, 0xffccffcc, 0xff99ffcc,\n\t\t\t0xff66ffcc, 0xff33ffcc, 0xff00ffcc, 0xffffcccc, 0xffcccccc, 0xff99cccc, 0xff66cccc, 0xff33cccc,\n\t\t\t0xff00cccc, 0xffff99cc, 0xffcc99cc, 0xff9999cc, 0xff6699cc, 0xff3399cc, 0xff0099cc, 0xffff66cc,\n\t\t\t0xffcc66cc, 0xff9966cc, 0xff6666cc, 0xff3366cc, 0xff0066cc, 0xffff33cc, 0xffcc33cc, 0xff9933cc,\n\t\t\t0xff6633cc, 0xff3333cc, 0xff0033cc, 0xffff00cc, 0xffcc00cc, 0xff9900cc, 0xff6600cc, 0xff3300cc,\n\t\t\t0xff0000cc, 0xffffff99, 0xffccff99, 0xff99ff99, 0xff66ff99, 0xff33ff99, 0xff00ff99, 0xffffcc99,\n\t\t\t0xffcccc99, 0xff99cc99, 0xff66cc99, 0xff33cc99, 0xff00cc99, 0xffff9999, 0xffcc9999, 0xff999999,\n\t\t\t0xff669999, 0xff339999, 0xff009999, 0xffff6699, 0xffcc6699, 0xff996699, 0xff666699, 0xff336699,\n\t\t\t0xff006699, 0xffff3399, 0xffcc3399, 0xff993399, 0xff663399, 0xff333399, 0xff003399, 0xffff0099,\n\t\t\t0xffcc0099, 0xff990099, 0xff660099, 0xff330099, 0xff000099, 0xffffff66, 0xffccff66, 0xff99ff66,\n\t\t\t0xff66ff66, 0xff33ff66, 0xff00ff66, 0xffffcc66, 0xffcccc66, 0xff99cc66, 0xff66cc66, 0xff33cc66,\n\t\t\t0xff00cc66, 0xffff9966, 0xffcc9966, 0xff999966, 0xff669966, 0xff339966, 0xff009966, 0xffff6666,\n\t\t\t0xffcc6666, 0xff996666, 0xff666666, 0xff336666, 0xff006666, 0xffff3366, 0xffcc3366, 0xff993366,\n\t\t\t0xff663366, 0xff333366, 0xff003366, 0xffff0066, 0xffcc0066, 0xff990066, 0xff660066, 0xff330066,\n\t\t\t0xff000066, 0xffffff33, 0xffccff33, 0xff99ff33, 0xff66ff33, 0xff33ff33, 0xff00ff33, 0xffffcc33,\n\t\t\t0xffcccc33, 0xff99cc33, 0xff66cc33, 0xff33cc33, 0xff00cc33, 0xffff9933, 0xffcc9933, 0xff999933,\n\t\t\t0xff669933, 0xff339933, 0xff009933, 0xffff6633, 0xffcc6633, 0xff996633, 0xff666633, 0xff336633,\n\t\t\t0xff006633, 0xffff3333, 0xffcc3333, 0xff993333, 0xff663333, 0xff333333, 0xff003333, 0xffff0033,\n\t\t\t0xffcc0033, 0xff990033, 0xff660033, 0xff330033, 0xff000033, 0xffffff00, 0xffccff00, 0xff99ff00,\n\t\t\t0xff66ff00, 0xff33ff00, 0xff00ff00, 0xffffcc00, 0xffcccc00, 0xff99cc00, 0xff66cc00, 0xff33cc00,\n\t\t\t0xff00cc00, 0xffff9900, 0xffcc9900, 0xff999900, 0xff669900, 0xff339900, 0xff009900, 0xffff6600,\n\t\t\t0xffcc6600, 0xff996600, 0xff666600, 0xff336600, 0xff006600, 0xffff3300, 0xffcc3300, 0xff993300,\n\t\t\t0xff663300, 0xff333300, 0xff003300, 0xffff0000, 0xffcc0000, 0xff990000, 0xff660000, 0xff330000,\n\t\t\t0xff0000ee, 0xff0000dd, 0xff0000bb, 0xff0000aa, 0xff000088, 0xff000077, 0xff000055, 0xff000044,\n\t\t\t0xff000022, 0xff000011, 0xff00ee00, 0xff00dd00, 0xff00bb00, 0xff00aa00, 0xff008800, 0xff007700,\n\t\t\t0xff005500, 0xff004400, 0xff002200, 0xff001100, 0xffee0000, 0xffdd0000, 0xffbb0000, 0xffaa0000,\n\t\t\t0xff880000, 0xff770000, 0xff550000, 0xff440000, 0xff220000, 0xff110000, 0xffeeeeee, 0xffdddddd,\n\t\t\t0xffbbbbbb, 0xffaaaaaa, 0xff888888, 0xff777777, 0xff555555, 0xff444444, 0xff222222, 0xff111111\n\t\t];\n\n\t\tlet i = 8;\n\n\t\tlet chunk;\n\t\tconst chunks = [];\n\n\t\twhile ( i < data.byteLength ) {\n\n\t\t\tlet id = '';\n\n\t\t\tfor ( let j = 0; j < 4; j ++ ) {\n\n\t\t\t\tid += String.fromCharCode( data.getUint8( i ++ ) );\n\n\t\t\t}\n\n\t\t\tconst chunkSize = data.getUint32( i, true ); i += 4;\n\t\t\ti += 4; // childChunks\n\n\t\t\tif ( id === 'SIZE' ) {\n\n\t\t\t\tconst x = data.getUint32( i, true ); i += 4;\n\t\t\t\tconst y = data.getUint32( i, true ); i += 4;\n\t\t\t\tconst z = data.getUint32( i, true ); i += 4;\n\n\t\t\t\tchunk = {\n\t\t\t\t\tpalette: DEFAULT_PALETTE,\n\t\t\t\t\tsize: { x: x, y: y, z: z },\n\t\t\t\t};\n\n\t\t\t\tchunks.push( chunk );\n\n\t\t\t\ti += chunkSize - ( 3 * 4 );\n\n\t\t\t} else if ( id === 'XYZI' ) {\n\n\t\t\t\tconst numVoxels = data.getUint32( i, true ); i += 4;\n\t\t\t\tchunk.data = new Uint8Array( buffer, i, numVoxels * 4 );\n\n\t\t\t\ti += numVoxels * 4;\n\n\t\t\t} else if ( id === 'RGBA' ) {\n\n\t\t\t\tconst palette = [ 0 ];\n\n\t\t\t\tfor ( let j = 0; j < 256; j ++ ) {\n\n\t\t\t\t\tpalette[ j + 1 ] = data.getUint32( i, true ); i += 4;\n\n\t\t\t\t}\n\n\t\t\t\tchunk.palette = palette;\n\n\t\t\t} else {\n\n\t\t\t\t// console.log( id, chunkSize, childChunks );\n\n\t\t\t\ti += chunkSize;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn chunks;\n\n\t}\n\n}\n\nclass VOXMesh extends Mesh {\n\n\tconstructor( chunk ) {\n\n\t\tconst data = chunk.data;\n\t\tconst size = chunk.size;\n\t\tconst palette = chunk.palette;\n\n\t\t//\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst nx = [ 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1 ];\n\t\tconst px = [ 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0 ];\n\t\tconst py = [ 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1 ];\n\t\tconst ny = [ 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0 ];\n\t\tconst nz = [ 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0 ];\n\t\tconst pz = [ 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1 ];\n\n\t\tconst _color = new Color();\n\n\t\tfunction add( tile, x, y, z, r, g, b ) {\n\n\t\t\tx -= size.x / 2;\n\t\t\ty -= size.z / 2;\n\t\t\tz += size.y / 2;\n\n\t\t\tfor ( let i = 0; i < 18; i += 3 ) {\n\n\t\t\t\t_color.setRGB( r, g, b, SRGBColorSpace );\n\n\t\t\t\tvertices.push( tile[ i + 0 ] + x, tile[ i + 1 ] + y, tile[ i + 2 ] + z );\n\t\t\t\tcolors.push( _color.r, _color.g, _color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Store data in a volume for sampling\n\n\t\tconst offsety = size.x;\n\t\tconst offsetz = size.x * size.y;\n\n\t\tconst array = new Uint8Array( size.x * size.y * size.z );\n\n\t\tfor ( let j = 0; j < data.length; j += 4 ) {\n\n\t\t\tconst x = data[ j + 0 ];\n\t\t\tconst y = data[ j + 1 ];\n\t\t\tconst z = data[ j + 2 ];\n\n\t\t\tconst index = x + ( y * offsety ) + ( z * offsetz );\n\n\t\t\tarray[ index ] = 255;\n\n\t\t}\n\n\t\t// Construct geometry\n\n\t\tlet hasColors = false;\n\n\t\tfor ( let j = 0; j < data.length; j += 4 ) {\n\n\t\t\tconst x = data[ j + 0 ];\n\t\t\tconst y = data[ j + 1 ];\n\t\t\tconst z = data[ j + 2 ];\n\t\t\tconst c = data[ j + 3 ];\n\n\t\t\tconst hex = palette[ c ];\n\t\t\tconst r = ( hex >> 0 & 0xff ) / 0xff;\n\t\t\tconst g = ( hex >> 8 & 0xff ) / 0xff;\n\t\t\tconst b = ( hex >> 16 & 0xff ) / 0xff;\n\n\t\t\tif ( r > 0 || g > 0 || b > 0 ) hasColors = true;\n\n\t\t\tconst index = x + ( y * offsety ) + ( z * offsetz );\n\n\t\t\tif ( array[ index + 1 ] === 0 || x === size.x - 1 ) add( px, x, z, - y, r, g, b );\n\t\t\tif ( array[ index - 1 ] === 0 || x === 0 ) add( nx, x, z, - y, r, g, b );\n\t\t\tif ( array[ index + offsety ] === 0 || y === size.y - 1 ) add( ny, x, z, - y, r, g, b );\n\t\t\tif ( array[ index - offsety ] === 0 || y === 0 ) add( py, x, z, - y, r, g, b );\n\t\t\tif ( array[ index + offsetz ] === 0 || z === size.z - 1 ) add( pz, x, z, - y, r, g, b );\n\t\t\tif ( array[ index - offsetz ] === 0 || z === 0 ) add( nz, x, z, - y, r, g, b );\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.computeVertexNormals();\n\n\t\tconst material = new MeshStandardMaterial();\n\n\t\tif ( hasColors ) {\n\n\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\t\t\tmaterial.vertexColors = true;\n\n\t\t}\n\n\t\tsuper( geometry, material );\n\n\t}\n\n}\n\nclass VOXData3DTexture extends Data3DTexture {\n\n\tconstructor( chunk ) {\n\n\t\tconst data = chunk.data;\n\t\tconst size = chunk.size;\n\n\t\tconst offsety = size.x;\n\t\tconst offsetz = size.x * size.y;\n\n\t\tconst array = new Uint8Array( size.x * size.y * size.z );\n\n\t\tfor ( let j = 0; j < data.length; j += 4 ) {\n\n\t\t\tconst x = data[ j + 0 ];\n\t\t\tconst y = data[ j + 1 ];\n\t\t\tconst z = data[ j + 2 ];\n\n\t\t\tconst index = x + ( y * offsety ) + ( z * offsetz );\n\n\t\t\tarray[ index ] = 255;\n\n\t\t}\n\n\t\tsuper( array, size.x, size.y, size.z );\n\n\t\tthis.format = RedFormat;\n\t\tthis.minFilter = NearestFilter;\n\t\tthis.magFilter = LinearFilter;\n\t\tthis.unpackAlignment = 1;\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nexport { VOXLoader, VOXMesh, VOXData3DTexture };\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAeA,IAAM,YAAN,cAAwB,OAAO;AAAA,EAE9B,KAAM,KAAK,QAAQ,YAAY,SAAU;AAExC,UAAM,QAAQ;AAEd,UAAM,SAAS,IAAI,WAAY,MAAM,OAAQ;AAC7C,WAAO,QAAS,MAAM,IAAK;AAC3B,WAAO,gBAAiB,aAAc;AACtC,WAAO,iBAAkB,MAAM,aAAc;AAC7C,WAAO,KAAM,KAAK,SAAW,QAAS;AAErC,UAAI;AAEH,eAAQ,MAAM,MAAO,MAAO,CAAE;AAAA,MAE/B,SAAU,GAAI;AAEb,YAAK,SAAU;AAEd,kBAAS,CAAE;AAAA,QAEZ,OAAO;AAEN,kBAAQ,MAAO,CAAE;AAAA,QAElB;AAEA,cAAM,QAAQ,UAAW,GAAI;AAAA,MAE9B;AAAA,IAED,GAAG,YAAY,OAAQ;AAAA,EAExB;AAAA,EAEA,MAAO,QAAS;AAEf,UAAM,OAAO,IAAI,SAAU,MAAO;AAElC,UAAM,KAAK,KAAK,UAAW,GAAG,IAAK;AACnC,UAAM,UAAU,KAAK,UAAW,GAAG,IAAK;AAExC,QAAK,OAAO,aAAa,YAAY,KAAM;AAE1C,cAAQ,MAAO,sBAAuB;AACtC;AAAA,IAED;AAEA,UAAM,kBAAkB;AAAA,MACvB;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MACpF;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;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",
  "names": ["id"]
}
